From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Thu, 30 May 2024 12:34:10 +0800
Subject: [PATCH] SparklyPaper: Skip dirty stats copy when requesting player
 stats

There's literally only one getDirty call. Because the map was only retrieved once, we don't actually need to create a copy of the map just to iterate it, we can just access it directly and clear it manually after use.

Comes with code cleanup

diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index f890738d3bb9fb5e70a9d323c6cec97f9948f9cf..f80030806e9203dae08c8687c23e37aa83bbbaf9 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -13,14 +13,14 @@ import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
+import java.nio.charset.Charset;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import net.minecraft.SharedConstants;
@@ -50,7 +50,7 @@ public class ServerStatsCounter extends StatsCounter {
         this.file = file;
         if (file.isFile()) {
             try {
-                this.parseLocal(server.getFixerUpper(), FileUtils.readFileToString(file));
+                this.parseLocal(server.getFixerUpper(), FileUtils.readFileToString(file, (Charset) null));
             } catch (IOException ioexception) {
                 ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
             } catch (JsonParseException jsonparseexception) {
@@ -75,7 +75,7 @@ public class ServerStatsCounter extends StatsCounter {
     public void save() {
         if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         try {
-            FileUtils.writeStringToFile(this.file, this.toJson());
+            FileUtils.writeStringToFile(this.file, this.toJson(), (Charset) null);
         } catch (IOException ioexception) {
             ServerStatsCounter.LOGGER.error("Couldn't save stats", ioexception);
         }
@@ -90,12 +90,16 @@ public class ServerStatsCounter extends StatsCounter {
         this.dirty.add(stat);
     }
 
+    // SparklyPaper start - Skip dirty stats copy when requesting player stats
+    /*
     private Set<Stat<?>> getDirty() {
         Set<Stat<?>> set = Sets.newHashSet(this.dirty);
 
         this.dirty.clear();
         return set;
     }
+    */
+    // SparklyPaper end
 
     public void parseLocal(DataFixer dataFixer, String json) {
         try {
@@ -116,37 +120,28 @@ public class ServerStatsCounter extends StatsCounter {
                         }
 
                         CompoundTag nbttagcompound1 = nbttagcompound.getCompound("stats");
-                        Iterator iterator = nbttagcompound1.getAllKeys().iterator();
+                        Iterator<String> iterator = nbttagcompound1.getAllKeys().iterator();
 
                         while (true) {
                             if (!iterator.hasNext()) {
                                 break label48;
                             }
 
-                            String s1 = (String) iterator.next();
+                            String s1 = iterator.next();
 
                             if (nbttagcompound1.contains(s1, 10)) {
                                 Util.ifElse(BuiltInRegistries.STAT_TYPE.getOptional(new ResourceLocation(s1)), (statisticwrapper) -> {
                                     CompoundTag nbttagcompound2 = nbttagcompound1.getCompound(s1);
-                                    Iterator iterator1 = nbttagcompound2.getAllKeys().iterator();
-
-                                    while (iterator1.hasNext()) {
-                                        String s2 = (String) iterator1.next();
 
+                                    for (String s2 : nbttagcompound2.getAllKeys()) {
                                         if (nbttagcompound2.contains(s2, 99)) {
-                                            Util.ifElse(this.getStat(statisticwrapper, s2), (statistic) -> {
-                                                this.stats.put(statistic, nbttagcompound2.getInt(s2));
-                                            }, () -> {
-                                                ServerStatsCounter.LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2);
-                                            });
+                                            Util.ifElse(this.getStat(statisticwrapper, s2), (statistic) -> this.stats.put(statistic, nbttagcompound2.getInt(s2)), () -> ServerStatsCounter.LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
                                         } else {
                                             ServerStatsCounter.LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", new Object[]{this.file, nbttagcompound2.get(s2), s2});
                                         }
                                     }
 
-                                }, () -> {
-                                    ServerStatsCounter.LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", this.file, s1);
-                                });
+                                }, () -> ServerStatsCounter.LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", this.file, s1));
                             }
                         }
                     }
@@ -184,19 +179,17 @@ public class ServerStatsCounter extends StatsCounter {
 
     private static CompoundTag fromJson(JsonObject json) {
         CompoundTag nbttagcompound = new CompoundTag();
-        Iterator iterator = json.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<String, JsonElement> entry = (Entry) iterator.next();
-            JsonElement jsonelement = (JsonElement) entry.getValue();
+        for (Entry<String, JsonElement> stringJsonElementEntry : json.entrySet()) {
+            JsonElement jsonelement = stringJsonElementEntry.getValue();
 
             if (jsonelement.isJsonObject()) {
-                nbttagcompound.put((String) entry.getKey(), ServerStatsCounter.fromJson(jsonelement.getAsJsonObject()));
+                nbttagcompound.put(stringJsonElementEntry.getKey(), ServerStatsCounter.fromJson(jsonelement.getAsJsonObject()));
             } else if (jsonelement.isJsonPrimitive()) {
                 JsonPrimitive jsonprimitive = jsonelement.getAsJsonPrimitive();
 
                 if (jsonprimitive.isNumber()) {
-                    nbttagcompound.putInt((String) entry.getKey(), jsonprimitive.getAsInt());
+                    nbttagcompound.putInt(stringJsonElementEntry.getKey(), jsonprimitive.getAsInt());
                 }
             }
         }
@@ -206,24 +199,17 @@ public class ServerStatsCounter extends StatsCounter {
 
     protected String toJson() {
         Map<StatType<?>, JsonObject> map = Maps.newHashMap();
-        ObjectIterator objectiterator = this.stats.object2IntEntrySet().iterator();
 
-        while (objectiterator.hasNext()) {
-            it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<Stat<?>> it_unimi_dsi_fastutil_objects_object2intmap_entry = (it.unimi.dsi.fastutil.objects.Object2IntMap.Entry) objectiterator.next();
-            Stat<?> statistic = (Stat) it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey();
+        for (Object2IntMap.Entry<Stat<?>> statEntry : this.stats.object2IntEntrySet()) {
+            Stat<?> statistic = statEntry.getKey();
 
-            ((JsonObject) map.computeIfAbsent(statistic.getType(), (statisticwrapper) -> {
-                return new JsonObject();
-            })).addProperty(ServerStatsCounter.getKey(statistic).toString(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue());
+            map.computeIfAbsent(statistic.getType(), (statisticwrapper) -> new JsonObject()).addProperty(ServerStatsCounter.getKey(statistic).toString(), statEntry.getIntValue());
         }
 
         JsonObject jsonobject = new JsonObject();
-        Iterator iterator = map.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry<StatType<?>, JsonObject> entry = (Entry) iterator.next();
 
-            jsonobject.add(BuiltInRegistries.STAT_TYPE.getKey((StatType) entry.getKey()).toString(), (JsonElement) entry.getValue());
+        for (Entry<StatType<?>, JsonObject> statTypeJsonObjectEntry : map.entrySet()) {
+            jsonobject.add(BuiltInRegistries.STAT_TYPE.getKey(statTypeJsonObjectEntry.getKey()).toString(), statTypeJsonObjectEntry.getValue());
         }
 
         JsonObject jsonobject1 = new JsonObject();
@@ -242,15 +228,15 @@ public class ServerStatsCounter extends StatsCounter {
     }
 
     public void sendStats(ServerPlayer player) {
-        Object2IntMap<Stat<?>> object2intmap = new Object2IntOpenHashMap();
-        Iterator iterator = this.getDirty().iterator();
+        Object2IntMap<Stat<?>> object2intmap = new Object2IntOpenHashMap<>();
+        // SparklyPaper - Skip dirty stats copy when requesting player stats
 
-        while (iterator.hasNext()) {
-            Stat<?> statistic = (Stat) iterator.next();
-
-            object2intmap.put(statistic, this.getValue(statistic));
+        for (Stat<?> stat : this.dirty) {
+            object2intmap.put(stat, this.getValue(stat));
         }
 
+        this.dirty.clear(); // SparklyPaper - Skip dirty stats copy when requesting player stats
+
         player.connection.send(new ClientboundAwardStatsPacket(object2intmap));
     }
 }
