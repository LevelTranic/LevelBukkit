From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Thu, 30 May 2024 09:37:05 +0800
Subject: [PATCH] Clear code


diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index 7793797dfae906e5181dff517a7d04c95e869a37..beb9ce576622cf4245e89dd6189d7530bd420162 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -9,7 +9,6 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.brigadier.suggestion.SuggestionsBuilder;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
@@ -255,9 +254,7 @@ public class CommandSourceStack implements ExecutionCommandSource<CommandSourceS
         Entity entity = this.entity;
 
         if (entity instanceof ServerPlayer) {
-            ServerPlayer entityplayer = (ServerPlayer) entity;
-
-            return entityplayer;
+            return (ServerPlayer) entity;
         } else {
             throw CommandSourceStack.ERROR_NOT_PLAYER.create();
         }
@@ -269,9 +266,7 @@ public class CommandSourceStack implements ExecutionCommandSource<CommandSourceS
         ServerPlayer entityplayer;
 
         if (entity instanceof ServerPlayer) {
-            ServerPlayer entityplayer1 = (ServerPlayer) entity;
-
-            entityplayer = entityplayer1;
+            entityplayer = (ServerPlayer) entity;
         } else {
             entityplayer = null;
         }
@@ -357,11 +352,7 @@ public class CommandSourceStack implements ExecutionCommandSource<CommandSourceS
         MutableComponent ichatmutablecomponent = Component.translatable("chat.type.admin", this.getDisplayName(), message).withStyle(ChatFormatting.GRAY, ChatFormatting.ITALIC);
 
         if (this.server.getGameRules().getBoolean(GameRules.RULE_SENDCOMMANDFEEDBACK)) {
-            Iterator iterator = this.server.getPlayerList().getPlayers().iterator();
-
-            while (iterator.hasNext()) {
-                ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+            for (ServerPlayer entityplayer : this.server.getPlayerList().getPlayers()) {
                 if (entityplayer != this.source && entityplayer.getBukkitEntity().hasPermission("minecraft.admin.command_feedback")) { // CraftBukkit
                     entityplayer.sendSystemMessage(ichatmutablecomponent);
                 }
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
index 9c262c82d9ab24bdbbe03df8cee3d5d99e8f8868..d2d2b33f4f113de4434012d9e1df9701c7056296 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
@@ -123,8 +123,7 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
     public <S> CompletableFuture<Suggestions> listSuggestions(CommandContext<S> commandcontext, SuggestionsBuilder suggestionsbuilder) {
         Object object = commandcontext.getSource();
 
-        if (object instanceof SharedSuggestionProvider) {
-            SharedSuggestionProvider icompletionprovider = (SharedSuggestionProvider) object;
+        if (object instanceof SharedSuggestionProvider icompletionprovider) {
             StringReader stringreader = new StringReader(suggestionsbuilder.getInput());
 
             stringreader.setCursor(suggestionsbuilder.getStart());
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index dc2ca58aae13a0a2d9b6211e2a8e1e9644d7d11e..b70f9f981ba6840d99cbf66303aa8dfb010a75a7 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -188,13 +188,11 @@ public class BlockStateParser {
 
     private CompletableFuture<Suggestions> suggestPropertyName(SuggestionsBuilder builder) {
         String s = builder.getRemaining().toLowerCase(Locale.ROOT);
-        Iterator iterator = this.state.getProperties().iterator();
 
-        while (iterator.hasNext()) {
-            Property<?> iblockstate = (Property) iterator.next();
+        for (Property<?> property : this.state.getProperties()) {
 
-            if (!this.properties.containsKey(iblockstate) && iblockstate.getName().startsWith(s)) {
-                builder.suggest(iblockstate.getName() + "=");
+            if (!this.properties.containsKey(property) && property.getName().startsWith(s)) {
+                builder.suggest(property.getName() + "=");
             }
         }
 
@@ -205,17 +203,10 @@ public class BlockStateParser {
         String s = builder.getRemaining().toLowerCase(Locale.ROOT);
 
         if (this.tag != null) {
-            Iterator iterator = this.tag.iterator();
-
-            while (iterator.hasNext()) {
-                Holder<Block> holder = (Holder) iterator.next();
-                Iterator iterator1 = ((Block) holder.value()).getStateDefinition().getProperties().iterator();
-
-                while (iterator1.hasNext()) {
-                    Property<?> iblockstate = (Property) iterator1.next();
-
-                    if (!this.vagueProperties.containsKey(iblockstate.getName()) && iblockstate.getName().startsWith(s)) {
-                        builder.suggest(iblockstate.getName() + "=");
+            for (Holder<Block> blockHolder : this.tag) {
+                for (Property<?> property : (blockHolder.value()).getStateDefinition().getProperties()) {
+                    if (!this.vagueProperties.containsKey(property.getName()) && property.getName().startsWith(s)) {
+                        builder.suggest(property.getName() + "=");
                     }
                 }
             }
@@ -237,12 +228,9 @@ public class BlockStateParser {
             return this.state.hasBlockEntity();
         } else {
             if (this.tag != null) {
-                Iterator iterator = this.tag.iterator();
+                for (Holder<Block> blockHolder : this.tag) {
 
-                while (iterator.hasNext()) {
-                    Holder<Block> holder = (Holder) iterator.next();
-
-                    if (((Block) holder.value()).defaultBlockState().hasBlockEntity()) {
+                    if (((Block) blockHolder.value()).defaultBlockState().hasBlockEntity()) {
                         return true;
                     }
                 }
@@ -273,14 +261,9 @@ public class BlockStateParser {
     }
 
     private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder builder, Property<T> property) {
-        Iterator iterator = property.getPossibleValues().iterator();
-
-        while (iterator.hasNext()) {
-            T t0 = (T) iterator.next(); // CraftBukkit - decompile error
-
-            if (t0 instanceof Integer) {
-                Integer integer = (Integer) t0;
-
+        // CraftBukkit - decompile error
+        for (T t0 : property.getPossibleValues()) {
+            if (t0 instanceof Integer integer) {
                 builder.suggest(integer);
             } else {
                 builder.suggest(property.getName(t0));
@@ -294,11 +277,8 @@ public class BlockStateParser {
         boolean flag = false;
 
         if (this.tag != null) {
-            Iterator iterator = this.tag.iterator();
-
-            while (iterator.hasNext()) {
-                Holder<Block> holder = (Holder) iterator.next();
-                Block block = (Block) holder.value();
+            for (Holder<Block> blockHolder : this.tag) {
+                Block block = blockHolder.value();
                 Property<?> iblockstate = block.getStateDefinition().getProperty(name);
 
                 if (iblockstate != null) {
@@ -306,12 +286,8 @@ public class BlockStateParser {
                 }
 
                 if (!flag) {
-                    Iterator iterator1 = block.getStateDefinition().getProperties().iterator();
-
-                    while (iterator1.hasNext()) {
-                        Property<?> iblockstate1 = (Property) iterator1.next();
-
-                        if (!this.vagueProperties.containsKey(iblockstate1.getName())) {
+                    for (Property<?> property : block.getStateDefinition().getProperties()) {
+                        if (!this.vagueProperties.containsKey(property.getName())) {
                             flag = true;
                             break;
                         }
@@ -332,11 +308,8 @@ public class BlockStateParser {
         if (builder.getRemaining().isEmpty() && this.tag != null) {
             boolean flag = false;
             boolean flag1 = false;
-            Iterator iterator = this.tag.iterator();
-
-            while (iterator.hasNext()) {
-                Holder<Block> holder = (Holder) iterator.next();
-                Block block = (Block) holder.value();
+            for (Holder<Block> blockHolder : this.tag) {
+                Block block = blockHolder.value();
 
                 flag |= !block.getStateDefinition().getProperties().isEmpty();
                 flag1 |= block.defaultBlockState().hasBlockEntity();
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
index e5ef298dc1df9cc42b3d349939a966b77fc0d554..2aa34b3fc7a0a1bacd7aabe3fec18dd722689471 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
@@ -154,11 +154,7 @@ public class EntitySelector {
                 if (this.isWorldLimited()) {
                     this.addEntities(list, source.getLevel(), vec3d, predicate);
                 } else {
-                    Iterator iterator1 = source.getServer().getAllLevels().iterator();
-
-                    while (iterator1.hasNext()) {
-                        ServerLevel worldserver1 = (ServerLevel) iterator1.next();
-
+                    for (ServerLevel worldserver1 : source.getServer().getAllLevels()) {
                         this.addEntities(list, worldserver1, vec3d, predicate);
                     }
                 }
@@ -233,11 +229,8 @@ public class EntitySelector {
                     object = source.getLevel().getPlayers((entityplayer3 -> !(entityplayer3 instanceof top.leavesmc.leaves.replay.ServerPhotographer) && predicate.test(entityplayer3)), i); // Leaves - skip photographer
                 } else {
                     object = Lists.newArrayList();
-                    Iterator iterator = source.getServer().getPlayerList().getPlayers().iterator();
-
-                    while (iterator.hasNext()) {
-                        ServerPlayer entityplayer2 = (ServerPlayer) iterator.next();
 
+                    for (ServerPlayer entityplayer2 : source.getServer().getPlayerList().getPlayers()) {
                         if (predicate.test(entityplayer2) && !(entityplayer2 instanceof top.leavesmc.leaves.replay.ServerPhotographer)) { // Leaves - skip photographer
                             ((List) object).add(entityplayer2);
                             if (((List) object).size() >= i) {
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index bee5d0a0516fbae4f550c0a77fcca6afcff8675f..b99ed5f0afc138d01ed85bcf69f1122e0e434d8e 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -260,11 +260,7 @@ public interface DispenseItemBehavior {
                 return stack;
             }
         };
-        Iterator iterator = SpawnEggItem.eggs().iterator();
-
-        while (iterator.hasNext()) {
-            SpawnEggItem itemmonsteregg = (SpawnEggItem) iterator.next();
-
+        for (SpawnEggItem itemmonsteregg : SpawnEggItem.eggs()) {
             DispenserBlock.registerBehavior(itemmonsteregg, dispensebehavioritem);
         }
 
@@ -321,11 +317,9 @@ public interface DispenseItemBehavior {
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
                 BlockPos blockposition = pointer.pos().relative((Direction) pointer.state().getValue(DispenserBlock.FACING));
                 List<LivingEntity> list = pointer.level().getEntitiesOfClass(LivingEntity.class, new AABB(blockposition), (entityliving) -> {
-                    if (!(entityliving instanceof Saddleable)) {
+                    if (!(entityliving instanceof Saddleable isaddleable)) {
                         return false;
                     } else {
-                        Saddleable isaddleable = (Saddleable) entityliving;
-
                         return !isaddleable.isSaddled() && isaddleable.isSaddleable();
                     }
                 });
@@ -1042,11 +1036,7 @@ public interface DispenseItemBehavior {
         });
         DispenserBlock.registerBehavior(Blocks.SHULKER_BOX.asItem(), new ShulkerBoxDispenseBehavior());
         DyeColor[] aenumcolor = DyeColor.values();
-        int i = aenumcolor.length;
-
-        for (int j = 0; j < i; ++j) {
-            DyeColor enumcolor = aenumcolor[j];
-
+        for (DyeColor enumcolor : aenumcolor) {
             DispenserBlock.registerBehavior(ShulkerBoxBlock.getBlockByColor(enumcolor).asItem(), new ShulkerBoxDispenseBehavior());
         }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index 728e2f00de43b5363fdee2d982acab2614e45bcb..888c38ef7390aac344c851951a1313da1702c59c 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -93,14 +93,9 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
 
     private static boolean tryShearLivingEntity(ServerLevel worldserver, BlockPos blockposition, org.bukkit.block.Block bukkitBlock, CraftItemStack craftItem) { // CraftBukkit - add args
         List<LivingEntity> list = worldserver.getEntitiesOfClass(LivingEntity.class, new AABB(blockposition), EntitySelector.NO_SPECTATORS);
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            LivingEntity entityliving = (LivingEntity) iterator.next();
-
-            if (entityliving instanceof Shearable) {
-                Shearable ishearable = (Shearable) entityliving;
 
+        for (LivingEntity entityliving : list) {
+            if (entityliving instanceof Shearable ishearable) {
                 if (ishearable.readyForShearing()) {
                     // CraftBukkit start
                     // Paper start - Add drops to shear events
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index bc391d27399d8c22e78735ca39aa8ab45efb6413..2a67ec1d3b159e86dfbf52def12a5d44f96218fe 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Dynamic;
@@ -16,14 +15,8 @@ import java.nio.file.Paths;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
-import joptsimple.NonOptionArgumentSpec;
-import joptsimple.OptionParser;
 import joptsimple.OptionSet;
-import joptsimple.OptionSpec;
-import joptsimple.util.PathConverter;
-import joptsimple.util.PathProperties;
 import net.minecraft.CrashReport;
-import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.commands.Commands;
@@ -64,7 +57,6 @@ import org.slf4j.Logger;
 import com.google.common.base.Charsets;
 import java.io.InputStreamReader;
 import java.util.concurrent.atomic.AtomicReference;
-import net.minecraft.SharedConstants;
 import org.bukkit.configuration.file.YamlConfiguration;
 // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 37e7e88fa75dda6c2b59ed610ec3ae2136c653a5..f32bfce7435bf2224310bde022e3a8898034845d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -3,9 +3,6 @@ package net.minecraft.server;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -45,7 +42,6 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
-import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -109,9 +105,7 @@ import net.minecraft.util.ProgressListener;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.SignatureValidator;
 import net.minecraft.util.TimeUtil;
-import net.minecraft.util.Unit;
 import net.minecraft.util.datafix.DataFixers;
-import net.minecraft.util.profiling.EmptyProfileResults;
 import net.minecraft.util.profiling.ProfileResults;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.profiling.ResultField;
@@ -184,8 +178,6 @@ import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
@@ -1529,11 +1521,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         } else {
             boolean ret = false; // Paper - force execution of all worlds, do not just bias the first
             if (this.tickRateManager.isSprinting() || this.haveTime()) {
-                Iterator iterator = this.getAllLevels().iterator();
-
-                while (iterator.hasNext()) {
-                    ServerLevel worldserver = (ServerLevel) iterator.next();
-
+                for (ServerLevel worldserver : this.getAllLevels()) {
                     if (worldserver.getChunkSource().pollTask()) {
                         ret = true; // Paper - force execution of all worlds, do not just bias the first
                     }
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index da840e40dbb0f0c8dab5fbb27e2cfe6a25aae498..f4b599e2d1f613c24444819c11914c679964d15e 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -54,10 +54,10 @@ public class PlayerAdvancements {
     private final PlayerList playerList;
     private final Path playerSavePath;
     private AdvancementTree tree;
-    private final Map<AdvancementHolder, AdvancementProgress> progress = new LinkedHashMap();
-    private final Set<AdvancementHolder> visible = new HashSet();
-    private final Set<AdvancementHolder> progressChanged = new HashSet();
-    private final Set<AdvancementNode> rootsToUpdate = new HashSet();
+    private final Map<AdvancementHolder, AdvancementProgress> progress = new LinkedHashMap<>();
+    private final Set<AdvancementHolder> visible = new HashSet<>();
+    private final Set<AdvancementHolder> progressChanged = new HashSet<>();
+    private final Set<AdvancementNode> rootsToUpdate = new HashSet<>();
     private ServerPlayer player;
     @Nullable
     private AdvancementHolder lastSelectedTab;
@@ -81,12 +81,8 @@ public class PlayerAdvancements {
     }
 
     public void stopListening() {
-        Iterator iterator = BuiltInRegistries.TRIGGER_TYPES.iterator();
-
-        while (iterator.hasNext()) {
-            CriterionTrigger<?> criteriontrigger = (CriterionTrigger) iterator.next();
-
-            criteriontrigger.removePlayerListeners(this);
+        for (CriterionTrigger<?> criterionTrigger : BuiltInRegistries.TRIGGER_TYPES) {
+            criterionTrigger.removePlayerListeners(this);
         }
 
     }
@@ -104,21 +100,14 @@ public class PlayerAdvancements {
     }
 
     private void registerListeners(ServerAdvancementManager advancementLoader) {
-        Iterator iterator = advancementLoader.getAllAdvancements().iterator();
-
-        while (iterator.hasNext()) {
-            AdvancementHolder advancementholder = (AdvancementHolder) iterator.next();
-
+        for (AdvancementHolder advancementholder : advancementLoader.getAllAdvancements()) {
             this.registerListeners(advancementholder);
         }
 
     }
 
     private void checkForAutomaticTriggers(ServerAdvancementManager advancementLoader) {
-        Iterator iterator = advancementLoader.getAllAdvancements().iterator();
-
-        while (iterator.hasNext()) {
-            AdvancementHolder advancementholder = (AdvancementHolder) iterator.next();
+        for (AdvancementHolder advancementholder : advancementLoader.getAllAdvancements()) {
             Advancement advancement = advancementholder.value();
 
             if (advancement.criteria().isEmpty()) {
@@ -209,7 +198,7 @@ public class PlayerAdvancements {
     }
 
     private PlayerAdvancements.Data asData() {
-        Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap();
+        Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap<>();
 
         this.progress.forEach((advancementholder, advancementprogress) -> {
             if (advancementprogress.hasProgress()) {
@@ -300,14 +289,11 @@ public class PlayerAdvancements {
         AdvancementProgress advancementprogress = this.getOrStartProgress(advancement);
 
         if (!advancementprogress.isDone()) {
-            Iterator iterator = advancement.value().criteria().entrySet().iterator();
-
-            while (iterator.hasNext()) {
-                Entry<String, Criterion<?>> entry = (Entry) iterator.next();
-                CriterionProgress criterionprogress = advancementprogress.getCriterion((String) entry.getKey());
+            for (Entry<String, Criterion<?>> stringCriterionEntry : advancement.value().criteria().entrySet()) {
+                CriterionProgress criterionprogress = advancementprogress.getCriterion(stringCriterionEntry.getKey());
 
                 if (criterionprogress != null && !criterionprogress.isDone()) {
-                    this.registerListener(advancement, (String) entry.getKey(), (Criterion) entry.getValue());
+                    this.registerListener(advancement, ((Entry<String, Criterion<?>>) (Entry) stringCriterionEntry).getKey(), (Criterion) ((Entry<String, Criterion<?>>) (Entry) stringCriterionEntry).getValue());
                 }
             }
 
@@ -320,14 +306,11 @@ public class PlayerAdvancements {
 
     private void unregisterListeners(AdvancementHolder advancement) {
         AdvancementProgress advancementprogress = this.getOrStartProgress(advancement);
-        Iterator iterator = advancement.value().criteria().entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry<String, Criterion<?>> entry = (Entry) iterator.next();
-            CriterionProgress criterionprogress = advancementprogress.getCriterion((String) entry.getKey());
+        for (Entry<String, Criterion<?>> stringCriterionEntry : advancement.value().criteria().entrySet()) {
+            CriterionProgress criterionprogress = advancementprogress.getCriterion(stringCriterionEntry.getKey());
 
             if (criterionprogress != null && (criterionprogress.isDone() || advancementprogress.isDone())) {
-                this.removeListener(advancement, (String) entry.getKey(), (Criterion) entry.getValue());
+                this.removeListener(advancement, (String) stringCriterionEntry.getKey(), (Criterion) stringCriterionEntry.getValue());
             }
         }
 
@@ -339,9 +322,9 @@ public class PlayerAdvancements {
 
     public void flushDirty(ServerPlayer player) {
         if (this.isFirstPacket || !this.rootsToUpdate.isEmpty() || !this.progressChanged.isEmpty()) {
-            Map<ResourceLocation, AdvancementProgress> map = new HashMap();
-            Set<AdvancementHolder> set = new HashSet();
-            Set<ResourceLocation> set1 = new HashSet();
+            Map<ResourceLocation, AdvancementProgress> map = new HashMap<>();
+            Set<AdvancementHolder> set = new HashSet<>();
+            Set<ResourceLocation> set1 = new HashSet<>();
             Iterator iterator = this.rootsToUpdate.iterator();
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 16373e0c5ea38199fab3eb289bf2a5fcf0dd7439..2cdef9ef1b5829a574c43abd8b6a2ba29dae4792 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -5,8 +5,6 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
@@ -106,9 +104,7 @@ public class ServerEntity {
         if (!list.equals(this.lastPassengers)) {
             this.broadcastAndSend(new ClientboundSetPassengersPacket(this.entity)); // CraftBukkit
             ServerEntity.removedPassengers(list, this.lastPassengers).forEach((entity) -> {
-                if (entity instanceof ServerPlayer) {
-                    ServerPlayer entityplayer = (ServerPlayer) entity;
-
+                if (entity instanceof ServerPlayer entityplayer) {
                     entityplayer.connection.teleport(entityplayer.getX(), entityplayer.getY(), entityplayer.getZ(), entityplayer.getYRot(), entityplayer.getXRot());
                 }
 
@@ -118,21 +114,18 @@ public class ServerEntity {
 
         Entity entity = this.entity;
 
-        if (!this.trackedPlayers.isEmpty() && entity instanceof ItemFrame) { // Paper - Perf: Only tick item frames if players can see it
-            ItemFrame entityitemframe = (ItemFrame) entity;
-
+        if (!this.trackedPlayers.isEmpty() && entity instanceof ItemFrame entityitemframe) { // Paper - Perf: Only tick item frames if players can see it
             if (true || this.tickCount % 10 == 0) { // CraftBukkit - Moved below, should always enter this block
                 ItemStack itemstack = entityitemframe.getItem();
 
                 if (this.level.paperConfig().maps.itemFrameCursorUpdateInterval > 0 && this.tickCount % this.level.paperConfig().maps.itemFrameCursorUpdateInterval == 0 && itemstack.getItem() instanceof MapItem) { // CraftBukkit - Moved this.tickCounter % 10 logic here so item frames do not enter the other blocks // Paper - Make item frame map cursor update interval configurable
-                    Integer integer = entityitemframe.cachedMapId; // Paper - Perf: Cache map ids on item frames
+                    int integer = entityitemframe.cachedMapId; // Paper - Perf: Cache map ids on item frames
                     MapItemSavedData worldmap = MapItem.getSavedData(integer, this.level);
 
                     if (worldmap != null) {
-                        Iterator<ServerPlayerConnection> iterator = this.trackedPlayers.iterator(); // CraftBukkit
-
-                        while (iterator.hasNext()) {
-                            ServerPlayer entityplayer = iterator.next().getPlayer(); // CraftBukkit
+                        // CraftBukkit
+                        for (ServerPlayerConnection trackedPlayer : this.trackedPlayers) {
+                            ServerPlayer entityplayer = trackedPlayer.getPlayer(); // CraftBukkit
 
                             worldmap.tickCarriedBy(entityplayer, itemstack);
                             Packet<?> packet = worldmap.getUpdatePacket(integer, entityplayer);
@@ -279,9 +272,7 @@ public class ServerEntity {
     }
 
     private static Stream<Entity> removedPassengers(List<Entity> passengers, List<Entity> lastPassengers) {
-        return lastPassengers.stream().filter((entity) -> {
-            return !passengers.contains(entity);
-        });
+        return lastPassengers.stream().filter((entity) -> !passengers.contains(entity));
     }
 
     public void removePairing(ServerPlayer player) {
@@ -290,7 +281,7 @@ public class ServerEntity {
     }
 
     public void addPairing(ServerPlayer player) {
-        List<Packet<ClientGamePacketListener>> list = new ArrayList();
+        List<Packet<ClientGamePacketListener>> list = new ArrayList<>();
 
         Objects.requireNonNull(list);
         this.sendPairingData(player, list::add);
@@ -342,10 +333,7 @@ public class ServerEntity {
         if (this.entity instanceof LivingEntity) {
             List<Pair<EquipmentSlot, ItemStack>> list = Lists.newArrayList();
             EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
-            int i = aenumitemslot.length;
-
-            for (int j = 0; j < i; ++j) {
-                EquipmentSlot enumitemslot = aenumitemslot[j];
+            for (EquipmentSlot enumitemslot : aenumitemslot) {
                 ItemStack itemstack = ((LivingEntity) this.entity).getItemBySlot(enumitemslot);
 
                 if (!itemstack.isEmpty()) {
@@ -372,9 +360,7 @@ public class ServerEntity {
 
         Entity entity = this.entity;
 
-        if (entity instanceof Mob) {
-            Mob entityinsentient = (Mob) entity;
-
+        if (entity instanceof Mob entityinsentient) {
             if (entityinsentient.isLeashed()) {
                 sender.accept(new ClientboundSetEntityLinkPacket(entityinsentient, entityinsentient.getLeashHolder()));
             }
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
index fe95aa9389f7d11e1380445a1eeca50cae549edb..05cc82b4511c794a49f6421c9afe14fada4a1598 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -1,8 +1,11 @@
 package net.minecraft.world.entity.decoration;
 
 import com.mojang.logging.LogUtils;
+
+import java.util.Objects;
 import java.util.OptionalInt;
 import javax.annotation.Nullable;
+
 import io.papermc.paper.event.player.PlayerItemFrameChangeEvent; // Paper - Add PlayerItemFrameChangeEvent
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -39,15 +42,14 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
-import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
 
 public class ItemFrame extends HangingEntity {
 
-    private static final Logger LOGGER = LogUtils.getLogger();
     public static final EntityDataAccessor<ItemStack> DATA_ITEM = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.ITEM_STACK);
     public static final EntityDataAccessor<Integer> DATA_ROTATION = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.INT);
     public static final int NUM_ROTATIONS = 8;
+    private static final Logger LOGGER = LogUtils.getLogger();
     public float dropChance;
     public boolean fixed;
     public Integer cachedMapId; // Paper - Perf: Cache map ids on item frames
@@ -67,6 +69,40 @@ public class ItemFrame extends HangingEntity {
         this.setDirection(facing);
     }
 
+    // CraftBukkit start - break out BB calc into own method
+    public static AABB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
+        {
+            double d0 = 0.46875D;
+            double d1 = (double) blockPosition.getX() + 0.5D - (double) direction.getStepX() * 0.46875D;
+            double d2 = (double) blockPosition.getY() + 0.5D - (double) direction.getStepY() * 0.46875D;
+            double d3 = (double) blockPosition.getZ() + 0.5D - (double) direction.getStepZ() * 0.46875D;
+
+            if (entity != null) {
+                entity.setPosRaw(d1, d2, d3);
+            }
+            double d4 = width;
+            double d5 = height;
+            double d6 = width;
+            Direction.Axis enumdirection_enumaxis = direction.getAxis();
+
+            switch (enumdirection_enumaxis) {
+                case X:
+                    d4 = 1.0D;
+                    break;
+                case Y:
+                    d5 = 1.0D;
+                    break;
+                case Z:
+                    d6 = 1.0D;
+            }
+
+            d4 /= 32.0D;
+            d5 /= 32.0D;
+            d6 /= 32.0D;
+            return new AABB(d1 - d4, d2 - d5, d3 - d6, d1 + d4, d2 + d5, d3 + d6);
+        }
+    }
+
     @Override
     protected float getEyeHeight(Pose pose, EntityDimensions dimensions) {
         return 0.0F;
@@ -80,7 +116,7 @@ public class ItemFrame extends HangingEntity {
 
     @Override
     public void setDirection(Direction facing) {
-        Validate.notNull(facing);
+        Objects.requireNonNull(facing);
         this.direction = facing;
         if (facing.getAxis().isHorizontal()) {
             this.setXRot(0.0F);
@@ -103,52 +139,18 @@ public class ItemFrame extends HangingEntity {
             // CraftBukkit end
         }
     }
-
-    // CraftBukkit start - break out BB calc into own method
-    public static AABB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
-        {
-            double d0 = 0.46875D;
-            double d1 = (double) blockPosition.getX() + 0.5D - (double) direction.getStepX() * 0.46875D;
-            double d2 = (double) blockPosition.getY() + 0.5D - (double) direction.getStepY() * 0.46875D;
-            double d3 = (double) blockPosition.getZ() + 0.5D - (double) direction.getStepZ() * 0.46875D;
-
-            if (entity != null) {
-                entity.setPosRaw(d1, d2, d3);
-            }
-            double d4 = (double) width;
-            double d5 = (double) height;
-            double d6 = (double) width;
-            Direction.Axis enumdirection_enumaxis = direction.getAxis();
-
-            switch (enumdirection_enumaxis) {
-                case X:
-                    d4 = 1.0D;
-                    break;
-                case Y:
-                    d5 = 1.0D;
-                    break;
-                case Z:
-                    d6 = 1.0D;
-            }
-
-            d4 /= 32.0D;
-            d5 /= 32.0D;
-            d6 /= 32.0D;
-            return new AABB(d1 - d4, d2 - d5, d3 - d6, d1 + d4, d2 + d5, d3 + d6);
-        }
-    }
     // CraftBukkit end
 
     @Override
     public boolean survives() {
         if (this.fixed) {
             return true;
-        } else if (!this.level().noCollision((Entity) this)) {
+        } else if (!this.level().noCollision(this)) {
             return false;
         } else {
             BlockState iblockdata = this.level().getBlockState(this.pos.relative(this.direction.getOpposite()));
 
-            return !iblockdata.isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(iblockdata)) ? false : this.level().getEntities((Entity) this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
+            return (iblockdata.isSolid() || (this.direction.getAxis().isHorizontal() && DiodeBlock.isDiode(iblockdata))) && this.level().getEntities(this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
         }
     }
 
@@ -177,7 +179,7 @@ public class ItemFrame extends HangingEntity {
     @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.fixed) {
-            return !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !source.isCreativePlayer() ? false : super.hurt(source, amount);
+            return (source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) || source.isCreativePlayer()) && super.hurt(source, amount);
         } else if (this.isInvulnerableTo(source)) {
             return false;
         } else if (!source.is(DamageTypeTags.IS_EXPLOSION) && !this.getItem().isEmpty()) {
@@ -190,7 +192,8 @@ public class ItemFrame extends HangingEntity {
                 // Paper start - Add PlayerItemFrameChangeEvent
                 if (source.getEntity() instanceof Player player) {
                     var event = new PlayerItemFrameChangeEvent((org.bukkit.entity.Player) player.getBukkitEntity(), (org.bukkit.entity.ItemFrame) this.getBukkitEntity(), this.getItem().asBukkitCopy(), PlayerItemFrameChangeEvent.ItemFrameChangeAction.REMOVE);
-                    if (!event.callEvent()) return true; // return true here because you aren't cancelling the damage, just the change
+                    if (!event.callEvent())
+                        return true; // return true here because you aren't cancelling the damage, just the change
                     this.setItem(ItemStack.fromBukkitCopy(event.getItemStack()), false);
                 }
                 // Paper end - Add PlayerItemFrameChangeEvent
@@ -258,9 +261,7 @@ public class ItemFrame extends HangingEntity {
                 }
 
             } else {
-                if (entity instanceof Player) {
-                    Player entityhuman = (Player) entity;
-
+                if (entity instanceof Player entityhuman) {
                     if (entityhuman.getAbilities().instabuild) {
                         this.removeFramedMap(itemstack);
                         return;
@@ -299,8 +300,8 @@ public class ItemFrame extends HangingEntity {
 
             if (worldmap != null) {
                 synchronized (worldmap) { // Folia - make map data thread-safe
-                worldmap.removedFromFrame(this.pos, this.getId());
-                worldmap.setDirty(true);
+                    worldmap.removedFromFrame(this.pos, this.getId());
+                    worldmap.setDirty(true);
                 } // Folia - make map data thread-safe
             }
 
@@ -309,7 +310,11 @@ public class ItemFrame extends HangingEntity {
     }
 
     public ItemStack getItem() {
-        return (ItemStack) this.getEntityData().get(ItemFrame.DATA_ITEM);
+        return this.getEntityData().get(ItemFrame.DATA_ITEM);
+    }
+
+    public void setItem(ItemStack stack) {
+        this.setItem(stack, true);
     }
 
     public OptionalInt getFramedMapId() {
@@ -335,10 +340,6 @@ public class ItemFrame extends HangingEntity {
         return this.getFramedMapId().isPresent();
     }
 
-    public void setItem(ItemStack stack) {
-        this.setItem(stack, true);
-    }
-
     public void setItem(ItemStack value, boolean update) {
         // CraftBukkit start
         this.setItem(value, update, true);
@@ -400,7 +401,7 @@ public class ItemFrame extends HangingEntity {
     }
 
     public int getRotation() {
-        return (Integer) this.getEntityData().get(ItemFrame.DATA_ROTATION);
+        return this.getEntityData().get(ItemFrame.DATA_ROTATION);
     }
 
     public void setRotation(int value) {
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index df799198d4d77a1827002d6d192ebaea3007d5b8..a82b8532017904b8a2296d945621b8e2afda4763 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -42,7 +42,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.map.CraftMapView;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 // CraftBukkit end
 
 public class MapItemSavedData extends SavedData {
@@ -130,7 +129,7 @@ public class MapItemSavedData extends SavedData {
                 dimension = StringTag.valueOf("bukkit:_invalidworld_");
             }
         }
-        DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, dimension)); // CraftBukkit - decompile error
+        DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, dimension)); // CraftBukkit - decompile error
         // Paper end - fix "Not a string" spam
         Logger logger = MapItemSavedData.LOGGER;
 
@@ -145,13 +144,12 @@ public class MapItemSavedData extends SavedData {
 
                 CraftWorld world = (CraftWorld) Bukkit.getWorld(uniqueId);
                 // Check if the stored world details are correct.
-                if (world == null) {
-                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
-                       This is to prevent them being corrupted with the wrong map data. */
-                    // PAIL: Use Vanilla exception handling for now
-                } else {
+                if (world != null) {
                     return world.getHandle().dimension();
                 }
+                /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                   This is to prevent them being corrupted with the wrong map data. */
+                // PAIL: Use Vanilla exception handling for now
             }
             throw new IllegalArgumentException("Invalid map dimension: " + nbt.get("dimension"));
             // CraftBukkit end
@@ -197,9 +195,7 @@ public class MapItemSavedData extends SavedData {
         Logger logger = MapItemSavedData.LOGGER;
 
         Objects.requireNonNull(logger);
-        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
-            nbt.put("dimension", nbtbase);
-        });
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> nbt.put("dimension", nbtbase));
         // CraftBukkit start
         if (true) {
             if (this.uniqueId == null) {
@@ -227,21 +223,15 @@ public class MapItemSavedData extends SavedData {
         nbt.putBoolean("unlimitedTracking", this.unlimitedTracking);
         nbt.putBoolean("locked", this.locked);
         ListTag nbttaglist = new ListTag();
-        Iterator iterator = this.bannerMarkers.values().iterator();
-
-        while (iterator.hasNext()) {
-            MapBanner mapiconbanner = (MapBanner) iterator.next();
 
+        for (MapBanner mapiconbanner : this.bannerMarkers.values()) {
             nbttaglist.add(mapiconbanner.save());
         }
 
         nbt.put("banners", nbttaglist);
         ListTag nbttaglist1 = new ListTag();
-        Iterator iterator1 = this.frameMarkers.values().iterator();
-
-        while (iterator1.hasNext()) {
-            MapFrame worldmapframe = (MapFrame) iterator1.next();
 
+        for (MapFrame worldmapframe : this.frameMarkers.values()) {
             nbttaglist1.add(worldmapframe.save());
         }
 
@@ -416,7 +406,7 @@ public class MapItemSavedData extends SavedData {
         }
 
         MapDecoration mapicon = new MapDecoration(type, b0, b1, b2, text);
-        MapDecoration mapicon1 = (MapDecoration) this.decorations.put(key, mapicon);
+        MapDecoration mapicon1 = this.decorations.put(key, mapicon);
 
         if (!mapicon.equals(mapicon1)) {
             if (mapicon1 != null && mapicon1.type().shouldTrackCount()) {
@@ -434,18 +424,15 @@ public class MapItemSavedData extends SavedData {
 
     @Nullable
     public synchronized Packet<?> getUpdatePacket(int id, Player player) { // Folia - make map data thread-safe
-        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = this.carriedByPlayers.get(player);
 
         return worldmap_worldmaphumantracker == null ? null : worldmap_worldmaphumantracker.nextUpdatePacket(id);
     }
 
     public synchronized void setColorsDirty(int x, int z) { // Folia - make map data thread-safe
         // Folia - make dirty only after updating data - moved down
-        Iterator iterator = this.carriedBy.iterator();
-
-        while (iterator.hasNext()) {
-            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) iterator.next();
 
+        for (HoldingPlayer worldmap_worldmaphumantracker : this.carriedBy) {
             worldmap_worldmaphumantracker.markColorsDirty(x, z);
         }
         this.setDirty(); // Folia - make dirty only after updating data - moved from above
@@ -458,7 +445,7 @@ public class MapItemSavedData extends SavedData {
     }
 
     public synchronized MapItemSavedData.HoldingPlayer getHoldingPlayer(Player player) { // Folia - make map data thread-safe
-        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = this.carriedByPlayers.get(player);
 
         if (worldmap_worldmaphumantracker == null) {
             worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
@@ -500,10 +487,10 @@ public class MapItemSavedData extends SavedData {
     }
 
     public synchronized void checkBanners(BlockGetter world, int x, int z) { // Folia - make map data thread-safe
-        Iterator iterator = this.bannerMarkers.values().iterator();
+        Iterator<MapBanner> iterator = this.bannerMarkers.values().iterator();
 
         while (iterator.hasNext()) {
-            MapBanner mapiconbanner = (MapBanner) iterator.next();
+            MapBanner mapiconbanner = iterator.next();
 
             if (mapiconbanner.getPos().getX() == x && mapiconbanner.getPos().getZ() == z) {
                 MapBanner mapiconbanner1 = MapBanner.fromWorld(world, mapiconbanner.getPos());
@@ -543,7 +530,7 @@ public class MapItemSavedData extends SavedData {
     }
 
     public synchronized boolean isExplorationMap() { // Folia - make map data thread-safe
-        Iterator iterator = this.decorations.values().iterator();
+        Iterator<MapDecoration> iterator = this.decorations.values().iterator();
 
         MapDecoration mapicon;
 
@@ -552,7 +539,7 @@ public class MapItemSavedData extends SavedData {
                 return false;
             }
 
-            mapicon = (MapDecoration) iterator.next();
+            mapicon = iterator.next();
         } while (!mapicon.type().isExplorationMapElement());
 
         return true;
@@ -563,7 +550,7 @@ public class MapItemSavedData extends SavedData {
         this.trackedDecorationCount = 0;
 
         for (int i = 0; i < icons.size(); ++i) {
-            MapDecoration mapicon = (MapDecoration) icons.get(i);
+            MapDecoration mapicon = icons.get(i);
 
             this.decorations.put("icon-" + i, mapicon);
             if (mapicon.type().shouldTrackCount()) {
@@ -647,7 +634,7 @@ public class MapItemSavedData extends SavedData {
             if ((true || this.dirtyDecorations) && this.tick++ % 5 == 0) { // CraftBukkit - custom maps don't update this yet
                 this.dirtyDecorations = false;
                 // CraftBukkit start
-                java.util.Collection<MapDecoration> icons = new java.util.ArrayList<MapDecoration>();
+                java.util.Collection<MapDecoration> icons = new java.util.ArrayList<>();
 
                 if (vanillaMaps) addSeenPlayers(icons); // Paper
 
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index c3266c43a073cb7d7eff10d1a1b15f0a2265b859..54f23d1457cea309c97adcf7f7c3bd930fe354b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -20,9 +20,9 @@ import org.bukkit.map.MapView;
 
 public final class CraftMapView implements MapView {
 
-    private final Map<CraftPlayer, RenderData> renderCache = new HashMap<CraftPlayer, RenderData>();
-    private final List<MapRenderer> renderers = new ArrayList<MapRenderer>();
-    private final Map<MapRenderer, Map<CraftPlayer, CraftMapCanvas>> canvases = new HashMap<MapRenderer, Map<CraftPlayer, CraftMapCanvas>>();
+    private final Map<CraftPlayer, RenderData> renderCache = new HashMap<>();
+    private final List<MapRenderer> renderers = new ArrayList<>();
+    private final Map<MapRenderer, Map<CraftPlayer, CraftMapCanvas>> canvases = new HashMap<>();
     protected final MapItemSavedData worldMap;
 
     public CraftMapView(MapItemSavedData worldMap) {
@@ -43,7 +43,7 @@ public final class CraftMapView implements MapView {
 
     @Override
     public boolean isVirtual() {
-        return this.renderers.size() > 0 && !(this.renderers.get(0) instanceof CraftMapRenderer);
+        return !this.renderers.isEmpty() && !(this.renderers.get(0) instanceof CraftMapRenderer);
     }
 
     @Override
@@ -99,14 +99,14 @@ public final class CraftMapView implements MapView {
 
     @Override
     public List<MapRenderer> getRenderers() {
-        return new ArrayList<MapRenderer>(this.renderers);
+        return new ArrayList<>(this.renderers);
     }
 
     @Override
     public void addRenderer(MapRenderer renderer) {
         if (!this.renderers.contains(renderer)) {
             this.renderers.add(renderer);
-            this.canvases.put(renderer, new HashMap<CraftPlayer, CraftMapCanvas>());
+            this.canvases.put(renderer, new HashMap<>());
             renderer.initialize(this);
         }
     }
@@ -138,14 +138,9 @@ public final class CraftMapView implements MapView {
 
     public RenderData render(CraftPlayer player) {
         boolean context = this.isContextual();
-        RenderData render = this.renderCache.get(context ? player : null);
+        RenderData render = this.renderCache.computeIfAbsent(context ? player : null, k -> new RenderData());
 
-        if (render == null) {
-            render = new RenderData();
-            this.renderCache.put(context ? player : null, render);
-        }
-
-        if (context && this.renderCache.containsKey(null)) {
+        if (context) {
             this.renderCache.remove(null);
         }
 
